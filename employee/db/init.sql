-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.employee
(
    id serial NOT NULL,
    email character varying(256) NOT NULL,
    password character varying(256) NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT unique_profile UNIQUE (email, password),
    CONSTRAINT unique_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.vacation_days
(
    id serial NOT NULL,
    employee_email character varying(256) NOT NULL,
    total_days bigint NOT NULL,
    used_days bigint NOT NULL,
    remaining_days bigint,
    year bigint,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.used_vacation_days
(
    id serial NOT NULL,
    employee_email character varying(256) NOT NULL,
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT used_vacation_day_for_employee UNIQUE (employee_email, start_date, end_date)
);

ALTER TABLE IF EXISTS public.vacation_days
    ADD FOREIGN KEY (employee_email)
    REFERENCES public.employee (email) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.used_vacation_days
    ADD FOREIGN KEY (employee_email)
    REFERENCES public.employee (email) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;

-- Function to update used_days and remaining_days
CREATE OR REPLACE FUNCTION update_vacation_days()
RETURNS TRIGGER AS $$
DECLARE
    current_start_date DATE;
    current_end_date DATE;
    days_in_year INT;
    current_year INT;
BEGIN
    -- Initialize the current start date to the start date of the inserted record
    current_start_date := NEW.start_date::DATE;

    -- Loop through each year until we reach the end date
    WHILE EXTRACT(YEAR FROM current_start_date) < EXTRACT(YEAR FROM NEW.end_date) LOOP
        current_end_date := DATE_TRUNC('year', current_start_date) + INTERVAL '1 year' - INTERVAL '1 day';
        days_in_year := current_end_date - current_start_date + 1;
        current_year := EXTRACT(YEAR FROM current_start_date);

        -- Update the used_days and remaining_days for the current year
        UPDATE vacation_days
        SET used_days = used_days + days_in_year,
            remaining_days = remaining_days - days_in_year
        WHERE employee_email = NEW.employee_email
          AND year = current_year;

        -- Move to the start of the next year
        current_start_date := current_end_date + INTERVAL '1 day';
    END LOOP;

    -- Calculate the remaining days in the final year
    days_in_year := NEW.end_date::DATE - current_start_date + 1;
    current_year := EXTRACT(YEAR FROM current_start_date);

    -- Update the used_days and remaining_days for the final year
    UPDATE vacation_days
    SET used_days = used_days + days_in_year,
        remaining_days = remaining_days - days_in_year
    WHERE employee_email = NEW.employee_email
      AND year = current_year;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger
CREATE TRIGGER trg_update_vacation_days
AFTER INSERT ON used_vacation_days
FOR EACH ROW
EXECUTE FUNCTION update_vacation_days();

END;
